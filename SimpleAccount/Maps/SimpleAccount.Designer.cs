//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SimpleAccountModel", "AccountsAccountTypes", "Accounts", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SimpleAccount.Maps.Account), "AccountTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SimpleAccount.Maps.AccountType))]

#endregion

namespace SimpleAccount.Maps
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SimpleAccountEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SimpleAccountEntities object using the connection string found in the 'SimpleAccountEntities' section of the application configuration file.
        /// </summary>
        public SimpleAccountEntities() : base("name=SimpleAccountEntities", "SimpleAccountEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SimpleAccountEntities object.
        /// </summary>
        public SimpleAccountEntities(string connectionString) : base(connectionString, "SimpleAccountEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SimpleAccountEntities object.
        /// </summary>
        public SimpleAccountEntities(EntityConnection connection) : base(connection, "SimpleAccountEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts1
        {
            get
            {
                if ((_Accounts1 == null))
                {
                    _Accounts1 = base.CreateObjectSet<Account>("Accounts1");
                }
                return _Accounts1;
            }
        }
        private ObjectSet<Account> _Accounts1;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccountType> AccountType
        {
            get
            {
                if ((_AccountType == null))
                {
                    _AccountType = base.CreateObjectSet<AccountType>("AccountType");
                }
                return _AccountType;
            }
        }
        private ObjectSet<AccountType> _AccountType;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts1 EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts1(Account account)
        {
            base.AddObject("Accounts1", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AccountType EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccountType(AccountType accountType)
        {
            base.AddObject("AccountType", accountType);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// Holds information about Accounts
    /// </summary>
    /// <LongDescription>
    /// Holds information about each Account and wich AccountType it corresponds to
    /// </LongDescription>
    [EdmEntityTypeAttribute(NamespaceName="SimpleAccountModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="iDAccount">Initial value of the IDAccount property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="iDAccountType">Initial value of the IDAccountType property.</param>
        /// <param name="iDUser">Initial value of the IDUser property.</param>
        /// <param name="lastUpdate">Initial value of the LastUpdate property.</param>
        public static Account CreateAccount(global::System.Int32 iDAccount, global::System.String description, global::System.Int32 iDAccountType, global::System.Int32 iDUser, global::System.String lastUpdate)
        {
            Account account = new Account();
            account.IDAccount = iDAccount;
            account.Description = description;
            account.IDAccountType = iDAccountType;
            account.IDUser = iDUser;
            account.LastUpdate = lastUpdate;
            return account;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDAccount
        {
            get
            {
                return _IDAccount;
            }
            set
            {
                if (_IDAccount != value)
                {
                    OnIDAccountChanging(value);
                    ReportPropertyChanging("IDAccount");
                    _IDAccount = StructuralObject.SetValidValue(value, "IDAccount");
                    ReportPropertyChanged("IDAccount");
                    OnIDAccountChanged();
                }
            }
        }
        private global::System.Int32 _IDAccount;
        partial void OnIDAccountChanging(global::System.Int32 value);
        partial void OnIDAccountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDAccountType
        {
            get
            {
                return _IDAccountType;
            }
            set
            {
                OnIDAccountTypeChanging(value);
                ReportPropertyChanging("IDAccountType");
                _IDAccountType = StructuralObject.SetValidValue(value, "IDAccountType");
                ReportPropertyChanged("IDAccountType");
                OnIDAccountTypeChanged();
            }
        }
        private global::System.Int32 _IDAccountType;
        partial void OnIDAccountTypeChanging(global::System.Int32 value);
        partial void OnIDAccountTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDUser
        {
            get
            {
                return _IDUser;
            }
            set
            {
                OnIDUserChanging(value);
                ReportPropertyChanging("IDUser");
                _IDUser = StructuralObject.SetValidValue(value, "IDUser");
                ReportPropertyChanged("IDUser");
                OnIDUserChanged();
            }
        }
        private global::System.Int32 _IDUser;
        partial void OnIDUserChanging(global::System.Int32 value);
        partial void OnIDUserChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastUpdate
        {
            get
            {
                return _LastUpdate;
            }
            set
            {
                OnLastUpdateChanging(value);
                ReportPropertyChanging("LastUpdate");
                _LastUpdate = StructuralObject.SetValidValue(value, false, "LastUpdate");
                ReportPropertyChanged("LastUpdate");
                OnLastUpdateChanged();
            }
        }
        private global::System.String _LastUpdate;
        partial void OnLastUpdateChanging(global::System.String value);
        partial void OnLastUpdateChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimpleAccountModel", "AccountsAccountTypes", "AccountTypes")]
        public AccountType AccountType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("SimpleAccountModel.AccountsAccountTypes", "AccountTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("SimpleAccountModel.AccountsAccountTypes", "AccountTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AccountType> AccountTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("SimpleAccountModel.AccountsAccountTypes", "AccountTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AccountType>("SimpleAccountModel.AccountsAccountTypes", "AccountTypes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimpleAccountModel", Name="AccountType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AccountType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AccountType object.
        /// </summary>
        /// <param name="iDAccountType">Initial value of the IDAccountType property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="lastUpdate">Initial value of the LastUpdate property.</param>
        /// <param name="iDUser">Initial value of the IDUser property.</param>
        public static AccountType CreateAccountType(global::System.Int32 iDAccountType, global::System.String description, global::System.DateTime lastUpdate, global::System.String iDUser)
        {
            AccountType accountType = new AccountType();
            accountType.IDAccountType = iDAccountType;
            accountType.Description = description;
            accountType.LastUpdate = lastUpdate;
            accountType.IDUser = iDUser;
            return accountType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IDAccountType
        {
            get
            {
                return _IDAccountType;
            }
            set
            {
                if (_IDAccountType != value)
                {
                    OnIDAccountTypeChanging(value);
                    ReportPropertyChanging("IDAccountType");
                    _IDAccountType = StructuralObject.SetValidValue(value, "IDAccountType");
                    ReportPropertyChanged("IDAccountType");
                    OnIDAccountTypeChanged();
                }
            }
        }
        private global::System.Int32 _IDAccountType;
        partial void OnIDAccountTypeChanging(global::System.Int32 value);
        partial void OnIDAccountTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastUpdate
        {
            get
            {
                return _LastUpdate;
            }
            set
            {
                OnLastUpdateChanging(value);
                ReportPropertyChanging("LastUpdate");
                _LastUpdate = StructuralObject.SetValidValue(value, "LastUpdate");
                ReportPropertyChanged("LastUpdate");
                OnLastUpdateChanged();
            }
        }
        private global::System.DateTime _LastUpdate;
        partial void OnLastUpdateChanging(global::System.DateTime value);
        partial void OnLastUpdateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IDUser
        {
            get
            {
                return _IDUser;
            }
            set
            {
                OnIDUserChanging(value);
                ReportPropertyChanging("IDUser");
                _IDUser = StructuralObject.SetValidValue(value, false, "IDUser");
                ReportPropertyChanged("IDUser");
                OnIDUserChanged();
            }
        }
        private global::System.String _IDUser;
        partial void OnIDUserChanging(global::System.String value);
        partial void OnIDUserChanged();

        #endregion

    }

    #endregion

}
